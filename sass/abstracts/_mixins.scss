// append a psuedo element after the element, which will then clear the floats
@mixin clearfix {
  &::after {
    content: "";
    display: table;
    clear: both;
  }
}

@mixin absoluteCenter {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

@mixin fixedTopLeft {
  position: fixed;  // doesn't move as you scroll
  top: 0;
  left: 0;
  z-index: 9999;
}


// MEDIA QUERY MANAGER
// * target screen or viewport width
// * target device resolution
/*
  0   - 600px:   Phone
  600 - 900px:   Tablet portrait
  900 - 1200px:  Table landscape
  1200 - 1800 is where out normal styles apply
  1800px + :     Big desktop

  NB: don't use pixels for font size:
      * as they won't be affected if the browser default changes
      * rem are not affected by root font size setting in all browsers
      * ems have been tested to respond the best for media queries
      * 1em = 16px
*/

/*
@mixin respond-phone {
   // CONTENT DIRECTIVE EXAMPLE
   // pass block of code to a mixin
   // @content will be replaced with any code passed to the mixin via a block
  @media (max-width: 37.5em) { @content };  // 600px / 16px => em value
}
*/

/*
  $breakpoint argument options
  - phone
  - tab-port
  - tab-land
  - big-desktop
*/
@mixin respond($breakpoint) {
  // IF DIRECTIVE EXAMPLE
  // conditional check to determine behaviour
  @if $breakpoint == phone {
    @media (max-width: 37.5em) { @content };  // 600px / 16px => em value
  }

  @if $breakpoint == tab-port {
    @media (max-width: 56.25em) { @content };  // 900px / 16px => em value
  }

  @if $breakpoint == tab-land {
    @media (max-width: 75em) { @content };  // 1200px / 16px => em value
  }

  @if $breakpoint == big-desktop {
    // min-width is the minimum widt at which query applies
    // if less than 1800px won't apply
    // if more than or equal to 1800px will apply
    @media (min-width: 112.5em) { @content };  // 1800 px / 16px => em value
  }
}
